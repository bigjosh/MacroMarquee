#include <iostream>
#include <iomanip>
#include <bitset>

using namespace std;

// This program takes some font data and generates C code that you can paste into 
// the programs here...
// https://github.com/bigjosh/MacroMarquee/tree/master/Arduino

// A nice arcade font from...
// http://jared.geek.nz/2014/jan/custom-fonts-for-microcontrollers

// defines ascii characters 0x20-0x7F (32-127)
// PROGMEM after variable name as per https://www.arduino.cc/en/Reference/PROGMEM

#define FONT_WIDTH 8      
#define INTERCHAR_SPACE 1
#define ASCII_OFFSET 0x20    // ASSCI code of 1st char in font array

const uint8_t Font[]  = {

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//  
  0x06,0x06,0x30,0x30,0x60,0xc0,0xc0,0x00,// !
  0xe0,0xe0,0x00,0xe0,0xe0,0x00,0x00,0x00,// "
  0x28,0xfe,0xfe,0x28,0xfe,0xfe,0x28,0x00,// #
  0xf6,0xf6,0xd6,0xd6,0xd6,0xde,0xde,0x00,// $
  0xc6,0xce,0x1c,0x38,0x70,0xe6,0xc6,0x00,// %
  0xfe,0xfe,0xd6,0xc6,0x16,0x1e,0x1e,0x00,// &
  0xe0,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,// '
  0xfe,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,// (
  0x00,0xfe,0xfe,0x00,0x00,0x00,0x00,0x00,// )
  0x6c,0x10,0xfe,0xfe,0xfe,0x10,0x6c,0x00,// *
  0x10,0x10,0x7c,0x10,0x10,0x00,0x00,0x00,// +
  0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x00,// ,
  0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,// -
  0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x00,// .
  0x0e,0x38,0xe0,0x00,0x00,0x00,0x00,0x00,// /
  0xfe,0xfe,0xc6,0xc6,0xc6,0xfe,0xfe,0x00,// 0
  0x06,0x66,0x66,0xfe,0xfe,0x06,0x06,0x00,// 1
  0xde,0xde,0xd6,0xd6,0xd6,0xf6,0xf6,0x00,// 2
  0xc6,0xc6,0xd6,0xd6,0xd6,0xfe,0xfe,0x00,// 3
  0xf8,0xf8,0x18,0x18,0x18,0x7e,0x7e,0x00,// 4
  0xf6,0xf6,0xd6,0xd6,0xd6,0xde,0xde,0x00,// 5
  0xfe,0xfe,0x36,0x36,0x36,0x3e,0x3e,0x00,// 6
  0xc2,0xc6,0xce,0xdc,0xf8,0xf0,0xe0,0x00,// 7
  0xfe,0xfe,0xd6,0xd6,0xd6,0xfe,0xfe,0x00,// 8
  0xf8,0xf8,0xd8,0xd8,0xd8,0xfe,0xfe,0x00,// 9
  0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,// :
  0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,// ;
  0x10,0x28,0x44,0x44,0x00,0x00,0x00,0x00,// <
  0x28,0x28,0x28,0x28,0x28,0x00,0x00,0x00,// =
  0x44,0x44,0x28,0x10,0x00,0x00,0x00,0x00,// >
  0xc0,0xc0,0xda,0xda,0xd0,0xf0,0xf0,0x00,// ?
  0xfe,0xfe,0xc6,0xf6,0xd6,0xf6,0xf6,0x00,// @
  0xfe,0xfe,0xd8,0xd8,0xd8,0xfe,0xfe,0x00,// A
  0xfe,0xfe,0xd6,0xd6,0xf6,0x7e,0x3e,0x00,// B
  0xfe,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,// C
  0xfe,0xfe,0xc6,0xc6,0xe6,0x7e,0x3e,0x00,// D
  0xfe,0xfe,0xd6,0xd6,0xd6,0xd6,0xd6,0x00,// E
  0xfe,0xfe,0xd0,0xd0,0xd0,0xc0,0xc0,0x00,// F
  0xfe,0xfe,0xc6,0xc6,0xd6,0xde,0xde,0x00,// G
  0xfe,0xfe,0x18,0x18,0x18,0xfe,0xfe,0x00,// H
  0xc6,0xc6,0xfe,0xfe,0xc6,0xc6,0xc6,0x00,// I
  0x06,0x06,0x06,0x06,0x06,0xfe,0xfc,0x00,// J
  0xfe,0xfe,0x18,0x18,0x78,0xfe,0x9e,0x00,// K
  0xfe,0xfe,0x06,0x06,0x06,0x06,0x06,0x00,// L
  0xfe,0xfe,0xc0,0x60,0xc0,0xfe,0xfe,0x00,// M
  0xfe,0xfe,0x70,0x38,0x1c,0xfe,0xfe,0x00,// N
  0xfe,0xfe,0xc6,0xc6,0xc6,0xfe,0xfe,0x00,// O
  0xfe,0xfe,0xd8,0xd8,0xd8,0xf8,0xf8,0x00,// P
  0xfe,0xfe,0xc6,0xce,0xce,0xfe,0xfe,0x00,// Q
  0xfe,0xfe,0xd8,0xdc,0xde,0xfe,0xfa,0x00,// R
  0xf6,0xf6,0xd6,0xd6,0xd6,0xde,0xde,0x00,// S
  0xc0,0xc0,0xfe,0xfe,0xc0,0xc0,0xc0,0x00,// T
  0xfe,0xfe,0x06,0x06,0x06,0xfe,0xfe,0x00,// U
  0xf8,0xfc,0x0e,0x06,0x0e,0xfc,0xf8,0x00,// V
  0xfc,0xfe,0x06,0x0c,0x06,0xfe,0xfc,0x00,// W
  0xee,0xfe,0x38,0x10,0x38,0xfe,0xee,0x00,// X
  0xe0,0xf0,0x3e,0x1e,0x3e,0xf0,0xe0,0x00,// Y
  0xce,0xde,0xd6,0xd6,0xd6,0xf6,0xe6,0x00,// Z
  0xfe,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,// [
  0xe0,0x38,0x0e,0x00,0x00,0x00,0x00,0x00,// \
  0x00,0xfe,0xfe,0x00,0x00,0x00,0x00,0x00,// ]
  0x00,0xfe,0x02,0xfe,0x00,0x00,0x00,0x00,// ^
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// _
  0x00,0xfe,0x02,0xfe,0x00,0x00,0x00,0x00,// `
  0xfe,0xfe,0xd8,0xd8,0xd8,0xfe,0xfe,0x00,// a
  0xfe,0xfe,0xd6,0xd6,0xf6,0x7e,0x3e,0x00,// b
  0xfe,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,// c
  0xfe,0xfe,0xc6,0xc6,0xe6,0x7e,0x3e,0x00,// d
  0xfe,0xfe,0xd6,0xd6,0xd6,0xd6,0xd6,0x00,// e
  0xfe,0xfe,0xd0,0xd0,0xd0,0xc0,0xc0,0x00,// f
  0xfe,0xfe,0xc6,0xc6,0xd6,0xde,0xde,0x00,// g
  0xfe,0xfe,0x18,0x18,0x18,0xfe,0xfe,0x00,// h
  0xc6,0xc6,0xfe,0xfe,0xc6,0xc6,0xc6,0x00,// i
  0x06,0x06,0x06,0x06,0x06,0xfe,0xfc,0x00,// j
  0xfe,0xfe,0x18,0x18,0x78,0xfe,0x9e,0x00,// k
  0xfe,0xfe,0x06,0x06,0x06,0x06,0x06,0x00,// l
  0xfe,0xfe,0xc0,0x60,0xc0,0xfe,0xfe,0x00,// m
  0xfe,0xfe,0x70,0x38,0x1c,0xfe,0xfe,0x00,// n
  0xfe,0xfe,0xc6,0xc6,0xc6,0xfe,0xfe,0x00,// o
  0xfe,0xfe,0xd8,0xd8,0xd8,0xf8,0xf8,0x00,// p
  0xfe,0xfe,0xc6,0xce,0xce,0xfe,0xfe,0x00,// q
  0xfe,0xfe,0xd8,0xdc,0xde,0xfe,0xfa,0x00,// r
  0xf6,0xf6,0xd6,0xd6,0xd6,0xde,0xde,0x00,// s
  0xc0,0xc0,0xfe,0xfe,0xc0,0xc0,0xc0,0x00,// t
  0xfe,0xfe,0x06,0x06,0x06,0xfe,0xfe,0x00,// u
  0xf8,0xfc,0x0e,0x06,0x0e,0xfc,0xf8,0x00,// v
  0xfc,0xfe,0x06,0x0c,0x06,0xfe,0xfc,0x00,// w
  0xee,0xfe,0x38,0x10,0x38,0xfe,0xee,0x00,// x
  0xe0,0xf0,0x3e,0x1e,0x3e,0xf0,0xe0,0x00,// y
  0xce,0xde,0xd6,0xd6,0xd6,0xf6,0xe6,0x00,// z
  0x38,0xfe,0xfe,0x00,0x00,0x00,0x00,0x00,// {
  0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// |
  0x00,0xfe,0xfe,0x38,0x00,0x00,0x00,0x00,// }
  0x00,0xfe,0x02,0xfe,0x00,0x00,0x00,0x00,// ~
  };


// Size of array from https://stackoverflow.com/a/18078435/3152071
template<class T, size_t N>
constexpr size_t size(T (&)[N]) { return N; }

int main()
{

    cout << "/*------------------- FONT CUT TOP HERE -------------------------------*/" << std::endl;


    cout << std::hex;

    cout << "#define ASCII_OFFSET (0x20)     // ASCII code of 1st char in font array" << std::endl;
    
    cout << "#define ASCII_NONPRINT (0x80)   // ASCII code of char to show for chars not included in the font (could also be a space)" << std::endl;
    
    cout << "#define FONT_WIDTH " << FONT_WIDTH+INTERCHAR_SPACE << std::endl;      
    
    cout << "const byte fontdata[][FONT_WIDTH] PROGMEM = {" << std::endl; 


    char c = ASCII_OFFSET;
    
    auto i=0;
    
    while ( i < size( Font ) ) {
        
  
        if (isprint( c )) {
             printf("    { // ASCII 0x%02.2X ('%c')\n" , (unsigned) c , c );
        }  else {
             printf("    { // ASCII 0x%02.2X" ,  (unsigned) c );
        }
        

        c++;
        
        
        for( auto j =0; j < FONT_WIDTH; j++ ) {
            
            cout << "       0b" << std::bitset<8>( Font[ i ] ) << ","  <<  std::endl ;
            
            i++;
                
        }
        
        cout << "       0b00000000,  // Interchar space" <<  std::endl ;        // Interchar space
        cout << "    },\r\n";
        
    }

  cout << "};" << std::endl;

    cout << "/*------------------- FONT CUT BOTTOM HERE -------------------------------*/" << std::endl;

    return 0;
}
